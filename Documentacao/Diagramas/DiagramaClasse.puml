@startuml Classes

' Título do diagrama
title Diagrama de Classes
top to bottom direction
' Classes
class ControladorConfiguracao {
    pathSettings: Path
    dictConfiguracoes : dict
    return_valor_configuracao(settingsBuscada: str) : str | None
    alterar_valor_configuracao(configuracaoSerAlterada: str, novoValor: str) : bool
}
class ExcecaoTemplate {
    message: str
    original_exception: Exception
}
class ExecutorTeste {
    pathSchema: Path
    pathValidator: Path
    _limparConteudoYaml(data: dict) : dict
    validarArquivoTeste(arquivoTeste: Path, pathPastaValidator: Path, tempoTimeout: int) : dict
    _padronizarArgsEntrada(args) : list
    gerarListaArquivosTeste(argsEntrada) : list

}
class GeradorRelatorios {
    casos_de_teste_: list
    processarSaidas(caminho_saida_esperada: : str|Path, caminho_saida_real: str|Path, yaml_valido: bool) -> list
    compararResultados(tupla_dados: tuple)
    gerarRelatorios(tempo_execucao_total: float)
    gerarRelatorioJson(tempo_execucao_total: float)
    {static} +modificarChaves(novas_chaves: dict)
    {static} +modificarErrosEsperados(novos_erros_esperados: dict)
}
class CoordenadorTestes {
    gestorCaminho: GestorCaminho
    get_instance(gestorCaminho: GestorCaminho) : CoordenadorTestes
    iniciarSistema()
    baixarArquivoUrl(url: str, enderecoArquivo, requestsTimeout:int, maxTentativas:int)
    prepararExecucaoTestes(args) : list
    executarThreadsTeste(listaArquivosTestar: list, numThreads: int)
    iniciarCriacaoRelatorio(resultadosValidacao: list, versaoRelatorio: str, tempo_execucao_total: float)
    executarTestesCompleto(args: list, versaoRelatorio: str, entregaGradual: bool)
}
class GerenciadorValidator {
    pathValidator: Path
    instalaValidatorCli()
    verificar_versao_validator() : str|None
    atualizar_validator_cli(requestsTimeout:int)
    validar_arquivo_fhir(arquivoValidar: Path, pastaRelatorio: Path, tempoTimeout: int, args: str) : list
}
class GestorCaminho {
    pathFut: Path
    pathSettings: Path
    controladorConfiguracao: ControladorConfiguracao
    pathValidator: Path 
    pathSchema: Path  
    pathDirTestes: Path
    pathPastaValidator: Path
    _resolveValidatorPath() : Path   
    _definirPastaValidator() :  Path  

}
class FachadaSistema {
    gerenciador_teste: CoordenadorTestes
    acharCaminhoProjeto() : Path   
    listarArquivosYaml(args) : list[Path]
    obterValorConfiguracao(settingsBuscada: str) : str|None
    atualizarValorConfiguracao(configuracaoSerAlterada: str, novoValor) : str 
    iniciarExecucaoTestes(args, tipoRelatorio: str, entregaGradual: bool)
    gerarArquivoTeste(dictInformacoesTeste: dict, caminho_arquivo)
    _returnCodigoANSI(codigoDesejado: str) : str
    obterDialogo(dialogoDesejado: str) : str
}
class TerminalUI {
    fachada: FachadaSistema
    flagAnimacaoSpinner: bool
    threadAnimacaoSpinner: threading.Thread
    controleAnimacao(status: str, timeout: float)
    mainMenu(args: list|str|None)
    _testesTerminal(args: str | list)
    _terminalConfiguracoes(nomeConfiguracao: str, novoValor: str)
}
package GUI {
    component configuracao{

    }
    component dashboard{

    }
    component dashboardGeral{

    }
    component formulario{

    }
    component TestManager{

    }
}

' Relacoes
GUI --> FachadaSistema : usa
CoordenadorTestes --> GeradorRelatorios : depende de
CoordenadorTestes --> ExecutorTeste : depende de
ExecutorTeste --> GerenciadorValidator : depende de
CoordenadorTestes --> GerenciadorValidator : usa e atualiza validator

'' Excecao template
GerenciadorValidator --> ExcecaoTemplate : lança
CoordenadorTestes --> ExcecaoTemplate : captura

'' Composições
CoordenadorTestes *-- GestorCaminho : faz parte de
GestorCaminho *-- ControladorConfiguracao : faz parte de
FachadaSistema *-- CoordenadorTestes : faz parte de
TerminalUI *-- FachadaSistema : faz parte de

@enduml