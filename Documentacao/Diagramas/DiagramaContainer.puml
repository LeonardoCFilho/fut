@startuml Container
!define C4Containers
!include https://raw.githubusercontent.com/plantuml-stdlib/C4-PlantUML/master/C4_Container.puml

' Título do diagrama
title Diagrama de Container - FUT

' Usuário principal
Person(user, "Usuário do FUT", "Interage com o sistema para validar e analisar testes.")

' Sistema principal (Frontend e Backend)
Container_Boundary(FUT, "FUT") {
    Container(gui, "Interface Gráfica (GUI)", "Streamlit", "Interface visual para usuários gerenciarem e visualizarem testes.")
    Container(cli, "Interface de Linha de Comando (CLI)", "Python", "Executa testes diretamente via terminal.")
    Container(interface_layer, "Camada de Interface", "Python", "Gerencia a comunicação entre frontend e backend.")

    Container(test_manager, "Gerenciador de Testes", "Python", "Gerencia casos de teste, configurações e interações com o executor.")
    Container(test_executor, "Executor de Testes", "Python", "Executa testes FHIR utilizando validator_cli.")
    Container(result_compiler, "Compilador de Resultados", "Python", "Gera relatórios comparando saídas esperadas e reais.")
    ContainerDb(data_storage, "Banco de dados", "", "Guarda resultados de testes e configurações.")
}

' Sistemas externos
System_Ext(fhir_validator, "Validador FHIR", "Ferramenta externa para validação de conformidade FHIR.")

' Relações entre containers
Rel(user, gui, "Gerencia casos de teste e visualiza relatórios")
Rel(user, cli, "Executa testes diretamente via terminal")
Rel(gui, interface_layer, "Interage com backend")
Rel(cli, interface_layer, "Executa comandos via backend")
Rel(interface_layer, test_manager, "Gerencia e organiza casos de teste")
Rel(test_manager, result_compiler, "Compila relatórios e processa saídas")
Rel(test_executor, fhir_validator, "Executa validações FHIR via validator_cli")
Rel(test_manager, data_storage, "Salva e consulta resultados")
Rel(test_manager, test_executor, "Orquestra e inicia execução de testes")
@enduml